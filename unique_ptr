template<typename T>
class unique_ptr
{
public:
   unique_ptr() : m_ptr(nullptr) {}
   unique_ptr(T* ptr) : m_ptr(ptr) {}

   ~unique_ptr()
   {
      if (m_ptr)
         delete m_ptr;
   }

   unique_ptr(const unique_ptr&) = delete;
   unique_ptr& operator=(const unique_ptr&) = delete;

   T* get() const { return m_ptr; }

   T& operator*() const { return *m_ptr; }

   T* operator->() const { return m_ptr; }

   T* release()
   {
      T* ptr = m_ptr;

      m_ptr = nullptr;

      return ptr;
   }

   void reset(T* ptr)
   {
      if (m_ptr != ptr)
      {
         delete m_ptr;
         m_ptr = ptr;
      }
   }

   unique_ptr(unique_ptr&& other)
   {
      m_ptr = other.m_ptr;

      other.m_ptr = nullptr;
   }

   unique_ptr& operator=(unique_ptr&& other)
   {
      if (this == &other)
         return *this;

      delete m_ptr;
      m_ptr = other.m_ptr;

      other.m_ptr = nullptr;

      return *this;
   }

private:
   T* m_ptr;
};
